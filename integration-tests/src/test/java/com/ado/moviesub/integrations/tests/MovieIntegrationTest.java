package com.ado.moviesub.integrations.tests;

import com.ado.moviesub.app.entity.movie.Movie;
import com.ado.moviesub.integrations.tests.util.ServerResponse;
import com.ado.moviesub.integrations.tests.util.TestData;
import org.junit.Test;
import org.springframework.http.HttpStatus;

import java.io.IOException;
import java.util.List;

import static org.junit.Assert.*;

public class MovieIntegrationTest extends BaseIntegrationTest {
  @Test
  public void testCreateMovie() throws IOException {
    Movie requestMovie = TestData.createSampleMovie("testCreateMovie");

    ServerResponse<Movie> httpResponse = createMovie(requestMovie);
    assertEquals(HttpStatus.OK, httpResponse.getStatusCode());

    Movie responseMovie = httpResponse.getResponseObject();

    assertNotNull("Id of movie must be generated by the server", responseMovie.getId());
    assertEquals(requestMovie.getName(), responseMovie.getName());
    assertEquals(requestMovie.getDescription(), responseMovie.getDescription());
    assertEquals(requestMovie.getDuration(), responseMovie.getDuration());
  }

  @Test
  public void testGetMovie() throws IOException {
    Movie sampleMovie = TestData.createSampleMovie("testGetMovie");

    ServerResponse<Movie> httpResponse = createMovie(sampleMovie);
    assertEquals(HttpStatus.OK, httpResponse.getStatusCode());

    Movie createdMovie = httpResponse.getResponseObject();
    httpResponse = getMovie(createdMovie.getId());

    assertEquals(HttpStatus.OK, httpResponse.getStatusCode());
    assertEquals(createdMovie, httpResponse.getResponseObject());
  }

  @Test
  public void testUpdateNotExistingMovie(){
    Movie sampleMovie = TestData.createSampleMovieBuilder("testUpdateNotExistingMovie").setId((long) Integer.MAX_VALUE).build();

    ServerResponse<Movie> httpResponse = updateMovie(sampleMovie);
    assertEquals(HttpStatus.NOT_FOUND, httpResponse.getStatusCode());
  }

  @Test
  public void testGetNonExistingMovie(){
    long unusedId = Integer.MAX_VALUE;

    ServerResponse<Movie> httpResponse = getMovie(unusedId);
    assertEquals(HttpStatus.NOT_FOUND, httpResponse.getStatusCode());
  }

  @Test
  public void testCreateDuplicateMovie(){
    Movie sampleMovie = TestData.createSampleMovie("testCreateDuplicateMovie");

    ServerResponse<Movie> httpResponse = createMovie(sampleMovie);
    assertEquals(HttpStatus.OK, httpResponse.getStatusCode());

    ServerResponse<Movie> duplicateResourceResponse = createMovie(sampleMovie);
    assertEquals(HttpStatus.CONFLICT, duplicateResourceResponse.getStatusCode());
  }

  @Test
  public void testGetAllMovies() throws IOException {
    Movie sampleMovie = TestData.createSampleMovie("testGetAllMovies");

    ServerResponse<Movie> httpResponse = createMovie(sampleMovie);
    assertEquals(HttpStatus.OK, httpResponse.getStatusCode());

    ServerResponse<List<Movie>> httpAllMoviesResponse = getMovies();
    assertEquals(HttpStatus.OK, httpAllMoviesResponse.getStatusCode());
    assertFalse(httpAllMoviesResponse.getResponseObject().isEmpty());
  }
}
